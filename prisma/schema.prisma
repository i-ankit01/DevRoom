// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  PREMIUM_USER
}

model User {
  id                String       @id @default(cuid())
  email             String?      @unique
  name              String?
  image             String?
  role              UserRole     @default(USER)
  myPlayground      Playground[]
  starredPlayground StarMark[]
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Account {
  id                String @id @default(cuid())
  userId            String @map("user_id")
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")

  refreshToken String? @map("refresh_token") @db.Text
  accessToken  String? @map("access_token") @db.Text
  expiresAt    Int?    @map("expires_at")
  tokenType    String? @map("token_type")
  scope        String?
  idToken      String? @map("id_token") @db.Text
  sessionState String? @map("session_state")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Templates {
  REACT
  NEXTJS
  HTML
  HONO
  ANGULAR
  EXPRESS
  VUE
}

model Playground {
  id          String     @id @default(cuid())
  title       String
  description String
  template    Templates  @default(REACT)
  starMark    StarMark[]
  userId      String     @map("user_id")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // add template files here 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StarMark {
  id           String     @id @default(cuid())
  userId       String
  playgroundId String
  isMarked     Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId, playgroundId])
}
